{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>¡Hola Stephania!</b>\n",
    "\n",
    "Mi nombre es Alejandro Abia Trujillo y tengo el gusto de revisar tu proyecto. \n",
    "\n",
    "A continuación, encontrarás mis comentarios en celdas pintadas de tres colores (verde, amarillo y rojo), a manera de semáforo. Por favor, <b>no las borres ni muevas de posición</b> mientras dure el proceso de revisión.\n",
    "\n",
    "<div class=\"alert alert-block alert-success\">\n",
    "<b>Éxito</b> <a class=\"tocSkip\"></a>\n",
    "\n",
    "En celdas verdes encontrarás comentarios en relación a tus aciertos y fortalezas. \n",
    "    \n",
    "</div>\n",
    "\n",
    "<div class=\"alert alert-block alert-warning\">\n",
    "<b>Antención</b> <a class=\"tocSkip\"></a>\n",
    "\n",
    "Utilizaré el color amarillo para llamar tu atención, expresar algo importante o compartirte alguna idea de valor. \n",
    "   \n",
    "</div>\n",
    "\n",
    "<div class=\"alert alert-block alert-danger\">\n",
    "<b>A resolver</b> <a class=\"tocSkip\"></a>\n",
    "    \n",
    "En rojo emitiré aquellos puntos que deberás atender para aprobar la revisión. \n",
    "\n",
    "</div>\n",
    "\n",
    "<div class=\"alert alert-block alert-info\">\n",
    "<b>Comentario estudiante</b><a class=\"tocSkip\"></a>\n",
    "\n",
    "Es factible que, a lo largo del proceso de revisión, quieras dejarme comentarios. Si es el caso, por favor realízalo dentro de celdas azules como esta.\n",
    "    \n",
    "</div>\n",
    "\n",
    "Respecto del proceso de revisión, tu proyecto será aceptado una vez que los comentarios en rojo hayan sido atendidos. \n",
    "\n",
    "¡Empecemos!\n",
    "___________________________________"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "<b>Comentario general primera iteración</b><a class=\"tocSkip\"></a>\n",
    "\n",
    "Stephania, presentaste un muy buen avance. ¡Muchas felicidades! Es necesario hacer un ajuste en la forma en la que estás relacionando tus datos entre los distintos dataframes que integrarán nuestro dataframe de consumo. Por favor, realiza las correcciones pertinentes para seguir adelante con la revisión.\n",
    "    \n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ¿Cuál es un mejor plan?\n",
    "\n",
    "Trabajas como analista para el operador de telecomunicaciones Megaline. La empresa ofrece a sus clientes dos tarifas de prepago, Surf y Ultimate. El departamento comercial quiere saber cuál de los planes genera más ingresos para poder ajustar el presupuesto de publicidad.\n",
    "\n",
    "Vas a realizar un análisis preliminar de las tarifas basado en una selección de clientes relativamente pequeña. Tendrás los datos de 500 clientes de Megaline: quiénes son los clientes, de dónde son, qué tarifa usan, así como la cantidad de llamadas que hicieron y los mensajes de texto que enviaron en 2018. Tu trabajo es analizar el comportamiento de los clientes y determinar qué tarifa de prepago genera más ingresos."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Observaciones:**\n",
    "\n",
    "    - Megaline redondea los segundos a minutos y los megabytes a gigabytes.\n",
    "    - Para llamadas, cada llamada individual se redondea: incluso si la llamada duró solo un segundo, se contará como un minuto.\n",
    "    - Para tráfico web, las sesiones web individuales no se redondean. En vez de esto, el total del mes se redondea hacia arriba. Si alguien usa 1025 megabytes este mes, se le cobrarán 2 gigabytes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**OBJETIVOS**\n",
    "\n",
    "Para cada usuario, buscar:\n",
    "1. El número de llamadas realizadas y la cantidad de minutos utilizados al mes.\n",
    "2. La cantidad de los SMS enviados por mes.\n",
    "3. El tráfico de internet por usuario y por mes.\n",
    "4. Ganancias mensuales para el plan Surf y Ultimate."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Hipotesis a comprobar:**\n",
    "\n",
    "    1. El ingreso promedio de los usuarios de las tarifas Ultimate y Surf difiere.\n",
    "    2. El ingreso promedio de los usuarios en el área de estados Nueva York-Nueva Jersey es diferente al de los usuarios de otras regiones.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Inicialización"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 711,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cargar todas las librerías\n",
    "import pandas as pd\n",
    "import numpy as np \n",
    "from math import factorial\n",
    "from scipy import stats as st\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "import seaborn as sns\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cargar los datos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 712,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Carga los archivos de datos en diferentes DataFrames\n",
    "\n",
    "calls = pd.read_csv('/datasets/megaline_calls.csv')\n",
    "internet = pd.read_csv('/datasets/megaline_internet.csv')\n",
    "messages = pd.read_csv('/datasets/megaline_messages.csv')\n",
    "plans = pd.read_csv('/datasets/megaline_plans.csv')\n",
    "users = pd.read_csv('/datasets/megaline_users.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preparar los datos"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### LLAMADAS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 713,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 137735 entries, 0 to 137734\n",
      "Data columns (total 4 columns):\n",
      " #   Column     Non-Null Count   Dtype  \n",
      "---  ------     --------------   -----  \n",
      " 0   id         137735 non-null  object \n",
      " 1   user_id    137735 non-null  int64  \n",
      " 2   call_date  137735 non-null  object \n",
      " 3   duration   137735 non-null  float64\n",
      "dtypes: float64(1), int64(1), object(2)\n",
      "memory usage: 4.2+ MB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_93</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>8.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_145</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>13.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_247</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>14.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_309</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>5.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_380</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>4.22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id   call_date  duration\n",
       "0   1000_93     1000  2018-12-27      8.52\n",
       "1  1000_145     1000  2018-12-27     13.66\n",
       "2  1000_247     1000  2018-12-27     14.48\n",
       "3  1000_309     1000  2018-12-28      5.76\n",
       "4  1000_380     1000  2018-12-30      4.22"
      ]
     },
     "execution_count": 713,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calls.info()\n",
    "calls.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 714,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>137735.000000</td>\n",
       "      <td>137735.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1247.658046</td>\n",
       "      <td>6.745927</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>139.416268</td>\n",
       "      <td>5.839241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1128.000000</td>\n",
       "      <td>1.290000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1247.000000</td>\n",
       "      <td>5.980000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1365.000000</td>\n",
       "      <td>10.690000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1499.000000</td>\n",
       "      <td>37.600000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             user_id       duration\n",
       "count  137735.000000  137735.000000\n",
       "mean     1247.658046       6.745927\n",
       "std       139.416268       5.839241\n",
       "min      1000.000000       0.000000\n",
       "25%      1128.000000       1.290000\n",
       "50%      1247.000000       5.980000\n",
       "75%      1365.000000      10.690000\n",
       "max      1499.000000      37.600000"
      ]
     },
     "execution_count": 714,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calls.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Observaciones:**\n",
    "1. No hay valores ausentes entre los datos.\n",
    "2. Dtype de call_date debe ser cambiado al formato datetime.\n",
    "3. La columna de duration tiene el tipo flotante (float64), pero de acuerdo a las instrucciones de la empresa Megaline se debe redondear los segundos a minutos, por lo que debemos convertir esta columna a números enteros.\n",
    "4. Hay 137.735 llamadas en el conjunto de datos. La duración media y mediana es de unos 6-7 minutos. Los valores medio y mediano están próximos entre sí, lo que significa que la distribución es simétrica.\n",
    "\n",
    "5. La duración mínima de una llamada es 0, lo que probablemente signifique unos segundos, según política de la empresa deberíamos redondearlo a 1 minuto. \n",
    "\n",
    "6. La duración máxima de la llamada es de 38 minutos."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### INTERNET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 715,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 104825 entries, 0 to 104824\n",
      "Data columns (total 4 columns):\n",
      " #   Column        Non-Null Count   Dtype  \n",
      "---  ------        --------------   -----  \n",
      " 0   id            104825 non-null  object \n",
      " 1   user_id       104825 non-null  int64  \n",
      " 2   session_date  104825 non-null  object \n",
      " 3   mb_used       104825 non-null  float64\n",
      "dtypes: float64(1), int64(1), object(2)\n",
      "memory usage: 3.2+ MB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_13</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>89.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_204</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_379</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>660.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_413</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>270.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_442</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>880.22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id session_date  mb_used\n",
       "0   1000_13     1000   2018-12-29    89.86\n",
       "1  1000_204     1000   2018-12-31     0.00\n",
       "2  1000_379     1000   2018-12-28   660.40\n",
       "3  1000_413     1000   2018-12-26   270.99\n",
       "4  1000_442     1000   2018-12-27   880.22"
      ]
     },
     "execution_count": 715,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "internet.info()\n",
    "internet.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Observaciones:**\n",
    "1. No hay valores ausentes entre los datos.\n",
    "2. Dtype de session_date debe ser cambiado al formato datetime.\n",
    "3. Para tráfico web, las sesiones web individuales no se redondean. En vez de esto, el total del mes se redondea hacia arriba y convertir esta columna a números enteros. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SMS - MENSAJES DE TEXTO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 716,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 76051 entries, 0 to 76050\n",
      "Data columns (total 3 columns):\n",
      " #   Column        Non-Null Count  Dtype \n",
      "---  ------        --------------  ----- \n",
      " 0   id            76051 non-null  object\n",
      " 1   user_id       76051 non-null  int64 \n",
      " 2   message_date  76051 non-null  object\n",
      "dtypes: int64(1), object(2)\n",
      "memory usage: 1.7+ MB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>message_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_125</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_160</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_223</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_251</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_255</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id message_date\n",
       "0  1000_125     1000   2018-12-27\n",
       "1  1000_160     1000   2018-12-31\n",
       "2  1000_223     1000   2018-12-31\n",
       "3  1000_251     1000   2018-12-27\n",
       "4  1000_255     1000   2018-12-26"
      ]
     },
     "execution_count": 716,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "messages.info()\n",
    "messages.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Observaciones:**\n",
    "1. No hay valores ausentes entre los datos.\n",
    "2. Dtype de message_date debe ser cambiado al formato datetime."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### USUARIOS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 717,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 500 entries, 0 to 499\n",
      "Data columns (total 8 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   user_id     500 non-null    int64 \n",
      " 1   first_name  500 non-null    object\n",
      " 2   last_name   500 non-null    object\n",
      " 3   age         500 non-null    int64 \n",
      " 4   city        500 non-null    object\n",
      " 5   reg_date    500 non-null    object\n",
      " 6   plan        500 non-null    object\n",
      " 7   churn_date  34 non-null     object\n",
      "dtypes: int64(2), object(6)\n",
      "memory usage: 31.4+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>plan</th>\n",
       "      <th>churn_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>Anamaria</td>\n",
       "      <td>Bauer</td>\n",
       "      <td>45</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA MSA</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>Mickey</td>\n",
       "      <td>Wilkerson</td>\n",
       "      <td>28</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-08-13</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>Carlee</td>\n",
       "      <td>Hoffman</td>\n",
       "      <td>36</td>\n",
       "      <td>Las Vegas-Henderson-Paradise, NV MSA</td>\n",
       "      <td>2018-10-21</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>Reynaldo</td>\n",
       "      <td>Jenkins</td>\n",
       "      <td>52</td>\n",
       "      <td>Tulsa, OK MSA</td>\n",
       "      <td>2018-01-28</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1004</td>\n",
       "      <td>Leonila</td>\n",
       "      <td>Thompson</td>\n",
       "      <td>40</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-05-23</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id first_name  last_name  age                                   city  \\\n",
       "0     1000   Anamaria      Bauer   45  Atlanta-Sandy Springs-Roswell, GA MSA   \n",
       "1     1001     Mickey  Wilkerson   28        Seattle-Tacoma-Bellevue, WA MSA   \n",
       "2     1002     Carlee    Hoffman   36   Las Vegas-Henderson-Paradise, NV MSA   \n",
       "3     1003   Reynaldo    Jenkins   52                          Tulsa, OK MSA   \n",
       "4     1004    Leonila   Thompson   40        Seattle-Tacoma-Bellevue, WA MSA   \n",
       "\n",
       "     reg_date      plan churn_date  \n",
       "0  2018-12-24  ultimate        NaN  \n",
       "1  2018-08-13      surf        NaN  \n",
       "2  2018-10-21      surf        NaN  \n",
       "3  2018-01-28      surf        NaN  \n",
       "4  2018-05-23      surf        NaN  "
      ]
     },
     "execution_count": 717,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users.info()\n",
    "users.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Observaciones:**\n",
    "1. Faltan valores en la columna 'churn_date'. Sin embargo, 'churn_date' es la fecha en que el usuario dejó de usar el servicio; si el valor es ausente, la tarifa se estaba usando cuando se generaron estos datos. En este caso cambiaremos NaN por 'in use'.\n",
    "2. 'reg_date' y 'churn_date' son tipo objeto, lo cambiaremos al tipo 'datetime'."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Planes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 718,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2 entries, 0 to 1\n",
      "Data columns (total 8 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   messages_included      2 non-null      int64  \n",
      " 1   mb_per_month_included  2 non-null      int64  \n",
      " 2   minutes_included       2 non-null      int64  \n",
      " 3   usd_monthly_pay        2 non-null      int64  \n",
      " 4   usd_per_gb             2 non-null      int64  \n",
      " 5   usd_per_message        2 non-null      float64\n",
      " 6   usd_per_minute         2 non-null      float64\n",
      " 7   plan_name              2 non-null      object \n",
      "dtypes: float64(2), int64(5), object(1)\n",
      "memory usage: 256.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "# Imprime la información general/resumen sobre el DataFrame de los planes\n",
    "plans.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 719,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   usd_monthly_pay  usd_per_gb  usd_per_message  usd_per_minute plan_name  \n",
       "0               20          10             0.03            0.03      surf  \n",
       "1               70           7             0.01            0.01  ultimate  "
      ]
     },
     "execution_count": 719,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Imprime una muestra de los datos para los planes\n",
    "plans.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nomenclatura de la tabla plans (datos sobre las tarifas):\n",
    "\n",
    "- plan_name — nombre de la tarifa\n",
    "- usd_monthly_pay — pago mensual en dólares estadounidenses\n",
    "- minutes_included — minutos incluidos al mes\n",
    "- messages_included — SMS incluidos al mes\n",
    "- mb_per_month_included — datos incluidos al mes (en megabytes)\n",
    "- usd_per_minute — precio por minuto tras exceder los límites del paquete (por ejemplo, si el paquete incluye 100 minutos el operador cobrará el minuto 101)\n",
    "- usd_per_message — precio por SMS tras exceder los límites del paquete\n",
    "- usd_per_gb — precio por gigabyte de los datos extra tras exceder los límites del paquete (1 GB = 1024 megabytes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Observaciones:**\n",
    "1. No hay valores ausentes entre los datos.\n",
    "2. No hay problemas con estos datos. El resultado muestra que sólo hay 2 planes en este conjunto de datos: 'Surf' y 'Ultimate' que corresponde con lo mencionado por la compañia Megaline.\n",
    "3. Dado que Megaline redondea los megabytes a gigabytes, podemos convertir gb_per_month_included a mb_per_month_included"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Corregir los datos"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### LLAMADAS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Problemas:\n",
    "1. Dtype de call_date debe ser cambiado al formato datetime.\n",
    "2. La columna de duration tiene el tipo flotante (float64), pero de acuerdo a las instrucciones de la empresa Megaline se debe redondear los segundos a minutos, por lo que debemos convertir esta columna a números enteros y redondear.\n",
    "3. La duración mínima de una llamada es 0, lo que probablemente significa que la llamada duro unos segundos, según política de la empresa vamos a redondearlo a 1 minuto. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 720,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convertir call_date a datetime\n",
    "calls['call_date'] = pd.to_datetime(calls['call_date'], format ='%Y-%m-%d')\n",
    "\n",
    "# Redondear 'duration' y convertir a números enteros\n",
    "#calls['duration'] = calls['duration'].apply(np.ceil).astype(int)\n",
    "calls['duration'] = np.ceil(calls['duration']).astype('int')\n",
    "\n",
    "# También vamos a crear una columna 'month' que tenga solo la parte del mes\n",
    "calls['month'] = calls['call_date'].dt.month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 721,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 137735 entries, 0 to 137734\n",
      "Data columns (total 5 columns):\n",
      " #   Column     Non-Null Count   Dtype         \n",
      "---  ------     --------------   -----         \n",
      " 0   id         137735 non-null  object        \n",
      " 1   user_id    137735 non-null  int64         \n",
      " 2   call_date  137735 non-null  datetime64[ns]\n",
      " 3   duration   137735 non-null  int64         \n",
      " 4   month      137735 non-null  int64         \n",
      "dtypes: datetime64[ns](1), int64(3), object(1)\n",
      "memory usage: 5.3+ MB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_93</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_145</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_247</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>15</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_309</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>6</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_380</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id  call_date  duration  month\n",
       "0   1000_93     1000 2018-12-27         9     12\n",
       "1  1000_145     1000 2018-12-27        14     12\n",
       "2  1000_247     1000 2018-12-27        15     12\n",
       "3  1000_309     1000 2018-12-28         6     12\n",
       "4  1000_380     1000 2018-12-30         5     12"
      ]
     },
     "execution_count": 721,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Comprobar cambios\n",
    "calls.info()\n",
    "calls.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 722,
   "metadata": {},
   "outputs": [],
   "source": [
    "calls['duration'] = calls['duration'].replace(0, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 723,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>duration</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>137735.000000</td>\n",
       "      <td>137735.000000</td>\n",
       "      <td>137735.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1247.658046</td>\n",
       "      <td>7.341496</td>\n",
       "      <td>9.320797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>139.416268</td>\n",
       "      <td>5.728989</td>\n",
       "      <td>2.412550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1128.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1247.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1365.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1499.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             user_id       duration          month\n",
       "count  137735.000000  137735.000000  137735.000000\n",
       "mean     1247.658046       7.341496       9.320797\n",
       "std       139.416268       5.728989       2.412550\n",
       "min      1000.000000       1.000000       1.000000\n",
       "25%      1128.000000       2.000000       8.000000\n",
       "50%      1247.000000       6.000000      10.000000\n",
       "75%      1365.000000      11.000000      11.000000\n",
       "max      1499.000000      38.000000      12.000000"
      ]
     },
     "execution_count": 723,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calls.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### INTERNET"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Problemas:**\n",
    "1. Dtype de session_date debe ser cambiado al formato datetime.\n",
    "3. Para tráfico web, las sesiones web individuales no se redondean. En vez de esto, el total del mes se redondea hacia arriba y  convertir esta columna a números enteros."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 724,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convertir los tipos de datos 'session_date' en datetime\n",
    "internet['session_date'] = pd.to_datetime(internet['session_date'], format ='%Y-%m-%d')\n",
    "\n",
    "# También vamos a crear una columna 'session_month' que tenga solo la parte del mes\n",
    "internet['month'] = internet['session_date'].dt.month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 725,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 104825 entries, 0 to 104824\n",
      "Data columns (total 5 columns):\n",
      " #   Column        Non-Null Count   Dtype         \n",
      "---  ------        --------------   -----         \n",
      " 0   id            104825 non-null  object        \n",
      " 1   user_id       104825 non-null  int64         \n",
      " 2   session_date  104825 non-null  datetime64[ns]\n",
      " 3   mb_used       104825 non-null  float64       \n",
      " 4   month         104825 non-null  int64         \n",
      "dtypes: datetime64[ns](1), float64(1), int64(2), object(1)\n",
      "memory usage: 4.0+ MB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_13</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>89.86</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_204</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>0.00</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_379</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>660.40</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_413</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>270.99</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_442</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>880.22</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id session_date  mb_used  month\n",
       "0   1000_13     1000   2018-12-29    89.86     12\n",
       "1  1000_204     1000   2018-12-31     0.00     12\n",
       "2  1000_379     1000   2018-12-28   660.40     12\n",
       "3  1000_413     1000   2018-12-26   270.99     12\n",
       "4  1000_442     1000   2018-12-27   880.22     12"
      ]
     },
     "execution_count": 725,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Comprobar cambios\n",
    "internet.info()\n",
    "internet.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SMS - MENSAJES DE TEXTO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Problemas:**\n",
    "1. Dtype de message_date debe ser cambiado al formato datetime."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 726,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convertir message_date a datetime\n",
    "messages['message_date'] = pd.to_datetime(messages['message_date'], format ='%Y-%m-%d')\n",
    "\n",
    "# También vamos a crear una columna 'month' que tenga solo la parte del mes\n",
    "messages['month'] = messages['message_date'].dt.month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 727,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 76051 entries, 0 to 76050\n",
      "Data columns (total 4 columns):\n",
      " #   Column        Non-Null Count  Dtype         \n",
      "---  ------        --------------  -----         \n",
      " 0   id            76051 non-null  object        \n",
      " 1   user_id       76051 non-null  int64         \n",
      " 2   message_date  76051 non-null  datetime64[ns]\n",
      " 3   month         76051 non-null  int64         \n",
      "dtypes: datetime64[ns](1), int64(2), object(1)\n",
      "memory usage: 2.3+ MB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>message_date</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_125</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_160</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_223</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_251</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_255</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id message_date  month\n",
       "0  1000_125     1000   2018-12-27     12\n",
       "1  1000_160     1000   2018-12-31     12\n",
       "2  1000_223     1000   2018-12-31     12\n",
       "3  1000_251     1000   2018-12-27     12\n",
       "4  1000_255     1000   2018-12-26     12"
      ]
     },
     "execution_count": 727,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Comprobar cambios\n",
    "messages.info()\n",
    "messages.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### USUARIOS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Problemas:**\n",
    "1. Faltan valores en la columna 'churn_date'. Sin embargo, 'churn_date' es la fecha en que el usuario dejó de usar el servicio; si el valor es ausente, la tarifa se estaba usando cuando se generaron estos datos. En este caso consideramos esta columna innecesaria.\n",
    "2. 'reg_date' es de tipo objeto, lo cambiaremos al tipo 'datetime'.\n",
    "3. Los resultados deberán ser entregados por usuario, consideramos nombre, apellido, edad, y ciudad columnas innecesarias, por ende serán eliminadas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 728,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convertir reg_date a datetime\n",
    "users['reg_date'] = pd.to_datetime(users['reg_date'], format ='%Y-%m-%d')\n",
    "\n",
    "# Crear una nueva columna para mostrar el departamento de los usuarios extraído de la columna de la ciudad\n",
    "users['state'] = users['city'].str[-6:].str[:2]\n",
    "\n",
    "# Eliminar columnas innecesaria\n",
    "users = users.drop(['first_name', 'last_name','age','city','reg_date','churn_date'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 729,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 500 entries, 0 to 499\n",
      "Data columns (total 3 columns):\n",
      " #   Column   Non-Null Count  Dtype \n",
      "---  ------   --------------  ----- \n",
      " 0   user_id  500 non-null    int64 \n",
      " 1   plan     500 non-null    object\n",
      " 2   state    500 non-null    object\n",
      "dtypes: int64(1), object(2)\n",
      "memory usage: 11.8+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>plan</th>\n",
       "      <th>state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>surf</td>\n",
       "      <td>NV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>surf</td>\n",
       "      <td>OK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1004</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id      plan state\n",
       "0     1000  ultimate    GA\n",
       "1     1001      surf    WA\n",
       "2     1002      surf    NV\n",
       "3     1003      surf    OK\n",
       "4     1004      surf    WA"
      ]
     },
     "execution_count": 729,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Comprobar cambios\n",
    "users.info()\n",
    "users.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Estudiar las condiciones del plan"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Es fundamental comprender cómo funcionan los planes y cómo se les cobra a los usuarios en función de su suscripción al plan. Observaremos la información del plan para ver sus condiciones una vez más."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 730,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   usd_monthly_pay  usd_per_gb  usd_per_message  usd_per_minute plan_name  \n",
       "0               20          10             0.03            0.03      surf  \n",
       "1               70           7             0.01            0.01  ultimate  "
      ]
     },
     "execution_count": 730,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Imprime las condiciones del plan y asegúrate de que te resulten claros\n",
    "plans.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calcular el número de llamadas hechas por cada usuario por mes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para calcular el número de llamadas realizadas por cada usuario al mes, necesitamos unir los datos tanto de usuarios (users) como de las llamadas (calls). Vamos a crear un nuevo Dataframe - users_calls fusionando los dos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 731,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>plan</th>\n",
       "      <th>state</th>\n",
       "      <th>id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000_93</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>9.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000_145</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>14.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000_247</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>15.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000_309</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>6.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000_380</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>5.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id      plan state        id  call_date  duration  month\n",
       "0     1000  ultimate    GA   1000_93 2018-12-27       9.0   12.0\n",
       "1     1000  ultimate    GA  1000_145 2018-12-27      14.0   12.0\n",
       "2     1000  ultimate    GA  1000_247 2018-12-27      15.0   12.0\n",
       "3     1000  ultimate    GA  1000_309 2018-12-28       6.0   12.0\n",
       "4     1000  ultimate    GA  1000_380 2018-12-30       5.0   12.0"
      ]
     },
     "execution_count": 731,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Unir el número de llamadas hechas por cada usuario\n",
    "users_calls = users.merge(calls, on=['user_id'], how='outer')\n",
    "users_calls.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ahora que tenemos los datos consolidados, crearemos una tabla dinámica con user_id y month como índices y apliquemos count() para obtener la cantidad de llamadas realizadas por cada usuario por mes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 732,
   "metadata": {},
   "outputs": [],
   "source": [
    "# crear una tabla dinámica con user_id and call_month\n",
    "calls_per_user = users_calls.pivot_table(index=['user_id', 'month'], aggfunc={'id': 'count'})\n",
    "\n",
    "# Asignar nombres a las columnas de la tabla dinámica\n",
    "calls_per_user.columns = ['number_of_calls']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 733,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>number_of_calls</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1000</th>\n",
       "      <th>12.0</th>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">1001</th>\n",
       "      <th>8.0</th>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.0</th>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.0</th>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11.0</th>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12.0</th>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">1002</th>\n",
       "      <th>10.0</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11.0</th>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12.0</th>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1003</th>\n",
       "      <th>12.0</th>\n",
       "      <td>149</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               number_of_calls\n",
       "user_id month                 \n",
       "1000    12.0                16\n",
       "1001    8.0                 27\n",
       "        9.0                 49\n",
       "        10.0                65\n",
       "        11.0                64\n",
       "        12.0                56\n",
       "1002    10.0                11\n",
       "        11.0                55\n",
       "        12.0                47\n",
       "1003    12.0               149"
      ]
     },
     "execution_count": 733,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Comprobar\n",
    "calls_per_user.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calcular la cantidad de minutos que usó cada usuario por mes.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 734,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Crear una tabla dinámica en user_id y call_month y sumar la duración\n",
    "minutes_per_user_per_month = users_calls.pivot_table(index=['user_id', 'month'], aggfunc={'duration': 'sum'})\n",
    "minutes_per_user_per_month = minutes_per_user_per_month.reset_index()\n",
    "\n",
    "# Cambiar nombre de 'duration'\n",
    "minutes_per_user_per_month.rename(columns={'duration': 'total_min_month'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 735,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_min_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12.0</td>\n",
       "      <td>124.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8.0</td>\n",
       "      <td>187.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9.0</td>\n",
       "      <td>326.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>411.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11.0</td>\n",
       "      <td>441.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_min_month\n",
       "0     1000   12.0            124.0\n",
       "1     1001    8.0            187.0\n",
       "2     1001    9.0            326.0\n",
       "3     1001   10.0            411.0\n",
       "4     1001   11.0            441.0"
      ]
     },
     "execution_count": 735,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Comprobar\n",
    "minutes_per_user_per_month.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calcula el número de mensajes enviados por cada usuario por mes.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 736,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Unir el número de mensajes de textos enviados por cada usuario\n",
    "users_messages = users.merge(messages, on='user_id', how='outer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 737,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>plan</th>\n",
       "      <th>state</th>\n",
       "      <th>id</th>\n",
       "      <th>message_date</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000_125</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000_160</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000_223</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000_251</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000_255</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id      plan state        id message_date  month\n",
       "0     1000  ultimate    GA  1000_125   2018-12-27   12.0\n",
       "1     1000  ultimate    GA  1000_160   2018-12-31   12.0\n",
       "2     1000  ultimate    GA  1000_223   2018-12-31   12.0\n",
       "3     1000  ultimate    GA  1000_251   2018-12-27   12.0\n",
       "4     1000  ultimate    GA  1000_255   2018-12-26   12.0"
      ]
     },
     "execution_count": 737,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Comprobar\n",
    "users_messages.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 738,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Crear una tabla dinámica en user_id y month\n",
    "messages_per_user_per_month = users_messages.pivot_table(index=['user_id', 'month'], aggfunc={'id': 'count'})\n",
    "messages_per_user_per_month = messages_per_user_per_month.reset_index()\n",
    "\n",
    "# Cambiar nombre de 'id'\n",
    "messages_per_user_per_month.rename(columns={'id': 'total_messages_month'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 739,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_messages_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12.0</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8.0</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9.0</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11.0</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_messages_month\n",
       "0     1000   12.0                    11\n",
       "1     1001    8.0                    30\n",
       "2     1001    9.0                    44\n",
       "3     1001   10.0                    53\n",
       "4     1001   11.0                    36"
      ]
     },
     "execution_count": 739,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Comprobar\n",
    "messages_per_user_per_month.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calcula el volumen del trafico de internet usado por cada usuario por mes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 740,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>plan</th>\n",
       "      <th>state</th>\n",
       "      <th>id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000_13</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>89.86</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000_204</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>0.00</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000_379</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>660.40</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000_413</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>270.99</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000_442</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>880.22</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id      plan state        id session_date  mb_used  month\n",
       "0     1000  ultimate    GA   1000_13   2018-12-29    89.86   12.0\n",
       "1     1000  ultimate    GA  1000_204   2018-12-31     0.00   12.0\n",
       "2     1000  ultimate    GA  1000_379   2018-12-28   660.40   12.0\n",
       "3     1000  ultimate    GA  1000_413   2018-12-26   270.99   12.0\n",
       "4     1000  ultimate    GA  1000_442   2018-12-27   880.22   12.0"
      ]
     },
     "execution_count": 740,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Unir la cantidad de internet usado por cada usuario\n",
    "users_internet = users.merge(internet, on='user_id', how='outer')\n",
    "\n",
    "# Comprobar\n",
    "users_internet.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 741,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Crear una tabla dinámica en user_id y session_month y sumar gb_used\n",
    "internet_per_user = users_internet.pivot_table(index=['user_id', 'month'], aggfunc={'mb_used': 'sum'})\n",
    "internet_per_user = internet_per_user.reset_index()\n",
    "\n",
    "\n",
    "# Cambiar nombre de 'gb_used'\n",
    "internet_per_user.rename(columns={'mb_used': 'mb_used_month'}, inplace=True)\n",
    "\n",
    "# Convertir megabyte to gigabyte, redondear el total del mes y convertir a número entero\n",
    "internet_per_user['gb_used_month'] = np.ceil((internet_per_user['mb_used_month'].values) / 1024).astype(int)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 742,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>mb_used_month</th>\n",
       "      <th>gb_used_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8.0</td>\n",
       "      <td>6919.15</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9.0</td>\n",
       "      <td>13314.82</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>22330.49</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11.0</td>\n",
       "      <td>18504.30</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  mb_used_month  gb_used_month\n",
       "0     1000   12.0        1901.47              2\n",
       "1     1001    8.0        6919.15              7\n",
       "2     1001    9.0       13314.82             14\n",
       "3     1001   10.0       22330.49             22\n",
       "4     1001   11.0       18504.30             19"
      ]
     },
     "execution_count": 742,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Comprobar\n",
    "internet_per_user.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Datos combinados de llamadas, minutos, mensajes, internet para todos los usuarios"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pondremos los datos agregados juntos en un DataFrame para que un registro en él represente lo que un único usuario consumió en un mes determinado."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 743,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Combina los datos para las llamadas y minutos con base en el user_id y el mes\n",
    "calls_minutes_per_month = minutes_per_user_per_month.merge(calls_per_user, on=['user_id','month'], how='outer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 744,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2258"
      ]
     },
     "execution_count": 744,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(calls_minutes_per_month)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 745,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2258"
      ]
     },
     "execution_count": 745,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(minutes_per_user_per_month)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 746,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2258"
      ]
     },
     "execution_count": 746,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(calls_per_user)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 747,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_min_month</th>\n",
       "      <th>number_of_calls</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9.0</td>\n",
       "      <td>326.0</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>411.0</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11.0</td>\n",
       "      <td>441.0</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_min_month  number_of_calls\n",
       "0     1000   12.0            124.0               16\n",
       "1     1001    8.0            187.0               27\n",
       "2     1001    9.0            326.0               49\n",
       "3     1001   10.0            411.0               65\n",
       "4     1001   11.0            441.0               64"
      ]
     },
     "execution_count": 747,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Comprobar\n",
    "calls_minutes_per_month.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 748,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1806"
      ]
     },
     "execution_count": 748,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(messages_per_user_per_month)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 749,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id                 0\n",
       "month                   0\n",
       "total_messages_month    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 749,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Revisar valores nulos\n",
    "messages_per_user_per_month.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 750,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2277"
      ]
     },
     "execution_count": 750,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(internet_per_user)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 751,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id          0\n",
       "month            0\n",
       "mb_used_month    0\n",
       "gb_used_month    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 751,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Revisar valores nulos\n",
    "internet_per_user.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 752,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Combina los datos para las mensajes e internet con base en el user_id y el mes\n",
    "messages_internet_per_month = messages_per_user_per_month.merge(internet_per_user, on=['user_id', 'month'], how='outer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 753,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2292"
      ]
     },
     "execution_count": 753,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(messages_internet_per_month)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 754,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_messages_month</th>\n",
       "      <th>mb_used_month</th>\n",
       "      <th>gb_used_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6919.15</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13314.82</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>22330.49</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18504.30</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_messages_month  mb_used_month  gb_used_month\n",
       "0     1000   12.0                  11.0        1901.47            2.0\n",
       "1     1001    8.0                  30.0        6919.15            7.0\n",
       "2     1001    9.0                  44.0       13314.82           14.0\n",
       "3     1001   10.0                  53.0       22330.49           22.0\n",
       "4     1001   11.0                  36.0       18504.30           19.0"
      ]
     },
     "execution_count": 754,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Comprobar\n",
    "messages_internet_per_month.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 755,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id                   0\n",
       "month                     0\n",
       "total_messages_month    486\n",
       "mb_used_month            15\n",
       "gb_used_month            15\n",
       "dtype: int64"
      ]
     },
     "execution_count": 755,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Revisar valores nulos\n",
    "messages_internet_per_month.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hemos encontrado que tenemos algunos valores nulos. Vamos a utilizar .fillna(0) para rellenar los valores ausentes porque, un valor ausente en este caso significa 0 consumo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 756,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Rellenar valores nulos\n",
    "for null in ['total_messages_month', 'mb_used_month','gb_used_month']:\n",
    "    messages_internet_per_month[null] = messages_internet_per_month[null].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 757,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id                 0\n",
       "month                   0\n",
       "total_messages_month    0\n",
       "mb_used_month           0\n",
       "gb_used_month           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 757,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Comprobar\n",
    "messages_internet_per_month.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 758,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_min_month</th>\n",
       "      <th>number_of_calls</th>\n",
       "      <th>total_messages_month</th>\n",
       "      <th>mb_used_month</th>\n",
       "      <th>gb_used_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6919.15</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9.0</td>\n",
       "      <td>326.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13314.82</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>411.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>22330.49</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11.0</td>\n",
       "      <td>441.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18504.30</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1001</td>\n",
       "      <td>12.0</td>\n",
       "      <td>422.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>19369.18</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1002</td>\n",
       "      <td>10.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>6552.01</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1002</td>\n",
       "      <td>11.0</td>\n",
       "      <td>393.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>19345.08</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1002</td>\n",
       "      <td>12.0</td>\n",
       "      <td>393.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>14396.24</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1003</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1135.0</td>\n",
       "      <td>149.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>27044.14</td>\n",
       "      <td>27.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_min_month  number_of_calls  total_messages_month  \\\n",
       "0     1000   12.0            124.0             16.0                  11.0   \n",
       "1     1001    8.0            187.0             27.0                  30.0   \n",
       "2     1001    9.0            326.0             49.0                  44.0   \n",
       "3     1001   10.0            411.0             65.0                  53.0   \n",
       "4     1001   11.0            441.0             64.0                  36.0   \n",
       "5     1001   12.0            422.0             56.0                  44.0   \n",
       "6     1002   10.0             62.0             11.0                  15.0   \n",
       "7     1002   11.0            393.0             55.0                  32.0   \n",
       "8     1002   12.0            393.0             47.0                  41.0   \n",
       "9     1003   12.0           1135.0            149.0                  50.0   \n",
       "\n",
       "   mb_used_month  gb_used_month  \n",
       "0        1901.47            2.0  \n",
       "1        6919.15            7.0  \n",
       "2       13314.82           14.0  \n",
       "3       22330.49           22.0  \n",
       "4       18504.30           19.0  \n",
       "5       19369.18           19.0  \n",
       "6        6552.01            7.0  \n",
       "7       19345.08           19.0  \n",
       "8       14396.24           15.0  \n",
       "9       27044.14           27.0  "
      ]
     },
     "execution_count": 758,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Combinar todo\n",
    "user_consumption_per_month = calls_minutes_per_month.merge(messages_internet_per_month, on=['user_id', 'month'], how='outer')\n",
    "\n",
    "# Comprobar\n",
    "user_consumption_per_month.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 759,
   "metadata": {},
   "outputs": [],
   "source": [
    "user_consumption_per_month = user_consumption_per_month.groupby(['user_id', 'month']).agg({\n",
    "    'total_min_month': 'sum',\n",
    "    'number_of_calls': 'sum',\n",
    "    'total_messages_month': 'sum',\n",
    "    'mb_used_month': 'sum',\n",
    "    'gb_used_month': 'sum'\n",
    "}).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 760,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_min_month</th>\n",
       "      <th>number_of_calls</th>\n",
       "      <th>total_messages_month</th>\n",
       "      <th>mb_used_month</th>\n",
       "      <th>gb_used_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6919.15</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9.0</td>\n",
       "      <td>326.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13314.82</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>411.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>22330.49</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11.0</td>\n",
       "      <td>441.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18504.30</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1001</td>\n",
       "      <td>12.0</td>\n",
       "      <td>422.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>19369.18</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1002</td>\n",
       "      <td>10.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>6552.01</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1002</td>\n",
       "      <td>11.0</td>\n",
       "      <td>393.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>19345.08</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1002</td>\n",
       "      <td>12.0</td>\n",
       "      <td>393.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>14396.24</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1003</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1135.0</td>\n",
       "      <td>149.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>27044.14</td>\n",
       "      <td>27.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_min_month  number_of_calls  total_messages_month  \\\n",
       "0     1000   12.0            124.0             16.0                  11.0   \n",
       "1     1001    8.0            187.0             27.0                  30.0   \n",
       "2     1001    9.0            326.0             49.0                  44.0   \n",
       "3     1001   10.0            411.0             65.0                  53.0   \n",
       "4     1001   11.0            441.0             64.0                  36.0   \n",
       "5     1001   12.0            422.0             56.0                  44.0   \n",
       "6     1002   10.0             62.0             11.0                  15.0   \n",
       "7     1002   11.0            393.0             55.0                  32.0   \n",
       "8     1002   12.0            393.0             47.0                  41.0   \n",
       "9     1003   12.0           1135.0            149.0                  50.0   \n",
       "\n",
       "   mb_used_month  gb_used_month  \n",
       "0        1901.47            2.0  \n",
       "1        6919.15            7.0  \n",
       "2       13314.82           14.0  \n",
       "3       22330.49           22.0  \n",
       "4       18504.30           19.0  \n",
       "5       19369.18           19.0  \n",
       "6        6552.01            7.0  \n",
       "7       19345.08           19.0  \n",
       "8       14396.24           15.0  \n",
       "9       27044.14           27.0  "
      ]
     },
     "execution_count": 760,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Comprobar\n",
    "user_consumption_per_month.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calcula el ingreso mensual para cada usuario"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para calcular los ingresos mensuales de cada usuario restaremos el límite del paquete gratuito del número total de llamadas, SMS y datos; multiplicaremos el resultado por el valor de tarifa de llamadas; agregaremos el cargo mensual según la tarifa de llamadas. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 761,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   usd_monthly_pay  usd_per_gb  usd_per_message  usd_per_minute plan_name  \n",
       "0               20          10             0.03            0.03      surf  \n",
       "1               70           7             0.01            0.01  ultimate  "
      ]
     },
     "execution_count": 761,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plans.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 762,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>plan</th>\n",
       "      <th>state</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1006</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>CA</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1008</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>FL</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1011</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>OH</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1013</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>TN</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id      plan state  messages_included  mb_per_month_included  \\\n",
       "0     1000  ultimate    GA               1000                  30720   \n",
       "1     1006  ultimate    CA               1000                  30720   \n",
       "2     1008  ultimate    FL               1000                  30720   \n",
       "3     1011  ultimate    OH               1000                  30720   \n",
       "4     1013  ultimate    TN               1000                  30720   \n",
       "\n",
       "   minutes_included  usd_monthly_pay  usd_per_gb  usd_per_message  \\\n",
       "0              3000               70           7             0.01   \n",
       "1              3000               70           7             0.01   \n",
       "2              3000               70           7             0.01   \n",
       "3              3000               70           7             0.01   \n",
       "4              3000               70           7             0.01   \n",
       "\n",
       "   usd_per_minute plan_name  \n",
       "0            0.01  ultimate  \n",
       "1            0.01  ultimate  \n",
       "2            0.01  ultimate  \n",
       "3            0.01  ultimate  \n",
       "4            0.01  ultimate  "
      ]
     },
     "execution_count": 762,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user_plan = users[['user_id','plan','state']]\n",
    "user_plan = user_plan.merge(plans, left_on='plan', right_on='plan_name')\n",
    "user_plan.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 763,
   "metadata": {},
   "outputs": [],
   "source": [
    "user_monthly = (calls_minutes_per_month\n",
    "              .merge(messages_per_user_per_month, how='outer', on=['user_id', 'month'])\n",
    "              .merge(internet_per_user, how='outer', on=['user_id', 'month'])\n",
    "              .merge(user_plan, on=['user_id'])\n",
    "             )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 764,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_min_month</th>\n",
       "      <th>number_of_calls</th>\n",
       "      <th>total_messages_month</th>\n",
       "      <th>mb_used_month</th>\n",
       "      <th>gb_used_month</th>\n",
       "      <th>plan</th>\n",
       "      <th>state</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>2.0</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6919.15</td>\n",
       "      <td>7.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9.0</td>\n",
       "      <td>326.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13314.82</td>\n",
       "      <td>14.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>411.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>22330.49</td>\n",
       "      <td>22.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11.0</td>\n",
       "      <td>441.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18504.30</td>\n",
       "      <td>19.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1001</td>\n",
       "      <td>12.0</td>\n",
       "      <td>422.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>19369.18</td>\n",
       "      <td>19.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1002</td>\n",
       "      <td>10.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>6552.01</td>\n",
       "      <td>7.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>NV</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1002</td>\n",
       "      <td>11.0</td>\n",
       "      <td>393.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>19345.08</td>\n",
       "      <td>19.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>NV</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1002</td>\n",
       "      <td>12.0</td>\n",
       "      <td>393.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>14396.24</td>\n",
       "      <td>15.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>NV</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1003</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1135.0</td>\n",
       "      <td>149.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>27044.14</td>\n",
       "      <td>27.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>OK</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_min_month  number_of_calls  total_messages_month  \\\n",
       "0     1000   12.0            124.0             16.0                  11.0   \n",
       "1     1001    8.0            187.0             27.0                  30.0   \n",
       "2     1001    9.0            326.0             49.0                  44.0   \n",
       "3     1001   10.0            411.0             65.0                  53.0   \n",
       "4     1001   11.0            441.0             64.0                  36.0   \n",
       "5     1001   12.0            422.0             56.0                  44.0   \n",
       "6     1002   10.0             62.0             11.0                  15.0   \n",
       "7     1002   11.0            393.0             55.0                  32.0   \n",
       "8     1002   12.0            393.0             47.0                  41.0   \n",
       "9     1003   12.0           1135.0            149.0                  50.0   \n",
       "\n",
       "   mb_used_month  gb_used_month      plan state  messages_included  \\\n",
       "0        1901.47            2.0  ultimate    GA               1000   \n",
       "1        6919.15            7.0      surf    WA                 50   \n",
       "2       13314.82           14.0      surf    WA                 50   \n",
       "3       22330.49           22.0      surf    WA                 50   \n",
       "4       18504.30           19.0      surf    WA                 50   \n",
       "5       19369.18           19.0      surf    WA                 50   \n",
       "6        6552.01            7.0      surf    NV                 50   \n",
       "7       19345.08           19.0      surf    NV                 50   \n",
       "8       14396.24           15.0      surf    NV                 50   \n",
       "9       27044.14           27.0      surf    OK                 50   \n",
       "\n",
       "   mb_per_month_included  minutes_included  usd_monthly_pay  usd_per_gb  \\\n",
       "0                  30720              3000               70           7   \n",
       "1                  15360               500               20          10   \n",
       "2                  15360               500               20          10   \n",
       "3                  15360               500               20          10   \n",
       "4                  15360               500               20          10   \n",
       "5                  15360               500               20          10   \n",
       "6                  15360               500               20          10   \n",
       "7                  15360               500               20          10   \n",
       "8                  15360               500               20          10   \n",
       "9                  15360               500               20          10   \n",
       "\n",
       "   usd_per_message  usd_per_minute plan_name  \n",
       "0             0.01            0.01  ultimate  \n",
       "1             0.03            0.03      surf  \n",
       "2             0.03            0.03      surf  \n",
       "3             0.03            0.03      surf  \n",
       "4             0.03            0.03      surf  \n",
       "5             0.03            0.03      surf  \n",
       "6             0.03            0.03      surf  \n",
       "7             0.03            0.03      surf  \n",
       "8             0.03            0.03      surf  \n",
       "9             0.03            0.03      surf  "
      ]
     },
     "execution_count": 764,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user_monthly.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 765,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id                    0\n",
       "month                      0\n",
       "total_min_month           35\n",
       "number_of_calls           35\n",
       "total_messages_month     487\n",
       "mb_used_month             16\n",
       "gb_used_month             16\n",
       "plan                       0\n",
       "state                      0\n",
       "messages_included          0\n",
       "mb_per_month_included      0\n",
       "minutes_included           0\n",
       "usd_monthly_pay            0\n",
       "usd_per_gb                 0\n",
       "usd_per_message            0\n",
       "usd_per_minute             0\n",
       "plan_name                  0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 765,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Revisar valores nulos\n",
    "user_monthly.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tenemos algunos valores nulos para aquellos usuarios que solo usaron 1 o 2 servicios. Es decir, solo mensajes e internet pero no llamadas e internet. Por tanto, reemplazaremos estos valores por 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 766,
   "metadata": {},
   "outputs": [],
   "source": [
    "for null in ['total_min_month', 'number_of_calls','total_messages_month','mb_used_month','gb_used_month']:\n",
    "    user_monthly[null] = user_monthly[null].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 767,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id                  0\n",
       "month                    0\n",
       "total_min_month          0\n",
       "number_of_calls          0\n",
       "total_messages_month     0\n",
       "mb_used_month            0\n",
       "gb_used_month            0\n",
       "plan                     0\n",
       "state                    0\n",
       "messages_included        0\n",
       "mb_per_month_included    0\n",
       "minutes_included         0\n",
       "usd_monthly_pay          0\n",
       "usd_per_gb               0\n",
       "usd_per_message          0\n",
       "usd_per_minute           0\n",
       "plan_name                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 767,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Comprobar\n",
    "user_monthly.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finalmente, calculemos calcular los ingresos mensuales de cada usuario:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 768,
   "metadata": {},
   "outputs": [],
   "source": [
    "user_monthly['gb_per_month_included']= np.ceil((user_monthly['mb_per_month_included'].values) / 1024).astype(int)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 769,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_min_month</th>\n",
       "      <th>number_of_calls</th>\n",
       "      <th>total_messages_month</th>\n",
       "      <th>mb_used_month</th>\n",
       "      <th>gb_used_month</th>\n",
       "      <th>plan</th>\n",
       "      <th>state</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>gb_per_month_included</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>2.0</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6919.15</td>\n",
       "      <td>7.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9.0</td>\n",
       "      <td>326.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13314.82</td>\n",
       "      <td>14.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>411.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>22330.49</td>\n",
       "      <td>22.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11.0</td>\n",
       "      <td>441.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18504.30</td>\n",
       "      <td>19.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_min_month  number_of_calls  total_messages_month  \\\n",
       "0     1000   12.0            124.0             16.0                  11.0   \n",
       "1     1001    8.0            187.0             27.0                  30.0   \n",
       "2     1001    9.0            326.0             49.0                  44.0   \n",
       "3     1001   10.0            411.0             65.0                  53.0   \n",
       "4     1001   11.0            441.0             64.0                  36.0   \n",
       "\n",
       "   mb_used_month  gb_used_month      plan state  messages_included  \\\n",
       "0        1901.47            2.0  ultimate    GA               1000   \n",
       "1        6919.15            7.0      surf    WA                 50   \n",
       "2       13314.82           14.0      surf    WA                 50   \n",
       "3       22330.49           22.0      surf    WA                 50   \n",
       "4       18504.30           19.0      surf    WA                 50   \n",
       "\n",
       "   mb_per_month_included  minutes_included  usd_monthly_pay  usd_per_gb  \\\n",
       "0                  30720              3000               70           7   \n",
       "1                  15360               500               20          10   \n",
       "2                  15360               500               20          10   \n",
       "3                  15360               500               20          10   \n",
       "4                  15360               500               20          10   \n",
       "\n",
       "   usd_per_message  usd_per_minute plan_name  gb_per_month_included  \n",
       "0             0.01            0.01  ultimate                     30  \n",
       "1             0.03            0.03      surf                     15  \n",
       "2             0.03            0.03      surf                     15  \n",
       "3             0.03            0.03      surf                     15  \n",
       "4             0.03            0.03      surf                     15  "
      ]
     },
     "execution_count": 769,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user_monthly.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 770,
   "metadata": {},
   "outputs": [],
   "source": [
    "user_monthly['monthly_profit'] = (((user_monthly['total_min_month']-user_monthly['minutes_included']) * user_monthly['usd_per_minute'])\n",
    "                                        + ((user_monthly['total_messages_month']-user_monthly['messages_included']) * user_monthly['usd_per_minute'])\n",
    "                                        + ((user_monthly['mb_used_month']-np.ceil(user_monthly['mb_per_month_included'].values/1000)) * user_monthly['usd_per_gb'])\n",
    "                                        + user_monthly['usd_monthly_pay'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 771,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>plan</th>\n",
       "      <th>month</th>\n",
       "      <th>monthly_profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>surf</td>\n",
       "      <td>1.0</td>\n",
       "      <td>97197.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>surf</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1094772.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>surf</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3066095.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>surf</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5984843.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>surf</td>\n",
       "      <td>5.0</td>\n",
       "      <td>10719946.66</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   plan  month  monthly_profit\n",
       "0  surf    1.0        97197.37\n",
       "1  surf    2.0      1094772.87\n",
       "2  surf    3.0      3066095.84\n",
       "3  surf    4.0      5984843.68\n",
       "4  surf    5.0     10719946.66"
      ]
     },
     "execution_count": 771,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_profit_month_plan = user_monthly.groupby(['plan', 'month'])['monthly_profit'].sum().reset_index()\n",
    "total_profit_month_plan.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 772,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Diagrama de barras for Surf\n",
    "total_profit_month_plan[total_profit_month_plan['plan'] == 'surf'].plot(y='monthly_profit', x='month', kind='bar')\n",
    "plt.title('Total monthly profit for the \"Surf\" plan');\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 773,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Diagrama de barras for Ultimate\n",
    "total_profit_month_plan[total_profit_month_plan['plan'] == 'ultimate'].plot(y='monthly_profit', x='month', kind='bar')\n",
    "plt.title('Total monthly profit for the \"Ultimate\" plan');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conclusion intermediaria**\n",
    "1. Durante el mes de diciembre, el Plan Surf y Ultimate tienen la mayor parte de sus ganancias.\n",
    "2. Surf y Ultimate presentan un comportamiento exponencial a lo largo del año.\n",
    "3. Aunque Surf y Ultimate tienen el mismo comportamiento mes a mes, podemos deducir que Ultimate tiene más ganancias."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Estudia el comportamiento del usuario"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calcularemos algunas estadísticas descriptivas para estudiar el comportamiento del usuario y muestren un panorama general captado por los datos. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Llamadas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 774,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compara la duración promedio de llamadas por cada plan por cada mes. \n",
    "mean_calls_duration = user_monthly.pivot_table(index='month', columns='plan', aggfunc='mean', values='total_min_month')\n",
    "\n",
    "# Dibuja una gráfica de barras para visualizarlo\n",
    "mean_calls_duration.plot(kind='bar', figsize=(10, 6))\n",
    "plt.title('Duración promedio de llamadas por plan y mes')\n",
    "plt.xlabel('Mes')\n",
    "plt.ylabel('Duración promedio de llamadas (minutos)')\n",
    "plt.legend(title='Plan')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conclusion intermediaria**\n",
    "1. Encontramos que los clientes del plan Surf hacen más llamadas que los clientes con Ultimate.\n",
    "2. En Febrero, los clientes del plan Ultimate alcanzan a utilzar casi 500 minutos de los 3000 que brinda el plan. \n",
    "4. El plan Surf parece tener más variación en la duración promedio de las llamadas que el plan Ultimate.\n",
    "5. La mayor duración promedio de llamadas para ambos planes se registró en diciembre de 2018."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 775,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compara el número de minutos que los usuarios de cada plan requieren cada mes. Traza un histograma.\n",
    "surf_user_monthly = user_monthly[user_monthly['plan'] == 'surf']\n",
    "ultimate_user_monthly = user_monthly[user_monthly['plan'] == 'ultimate']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 776,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_min_month</th>\n",
       "      <th>number_of_calls</th>\n",
       "      <th>total_messages_month</th>\n",
       "      <th>mb_used_month</th>\n",
       "      <th>gb_used_month</th>\n",
       "      <th>plan</th>\n",
       "      <th>state</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>gb_per_month_included</th>\n",
       "      <th>monthly_profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6919.15</td>\n",
       "      <td>7.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>69041.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9.0</td>\n",
       "      <td>326.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13314.82</td>\n",
       "      <td>14.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>133002.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>411.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>22330.49</td>\n",
       "      <td>22.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>223162.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11.0</td>\n",
       "      <td>441.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18504.30</td>\n",
       "      <td>19.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>184900.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1001</td>\n",
       "      <td>12.0</td>\n",
       "      <td>422.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>19369.18</td>\n",
       "      <td>19.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>193549.28</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_min_month  number_of_calls  total_messages_month  \\\n",
       "1     1001    8.0            187.0             27.0                  30.0   \n",
       "2     1001    9.0            326.0             49.0                  44.0   \n",
       "3     1001   10.0            411.0             65.0                  53.0   \n",
       "4     1001   11.0            441.0             64.0                  36.0   \n",
       "5     1001   12.0            422.0             56.0                  44.0   \n",
       "\n",
       "   mb_used_month  gb_used_month  plan state  messages_included  \\\n",
       "1        6919.15            7.0  surf    WA                 50   \n",
       "2       13314.82           14.0  surf    WA                 50   \n",
       "3       22330.49           22.0  surf    WA                 50   \n",
       "4       18504.30           19.0  surf    WA                 50   \n",
       "5       19369.18           19.0  surf    WA                 50   \n",
       "\n",
       "   mb_per_month_included  minutes_included  usd_monthly_pay  usd_per_gb  \\\n",
       "1                  15360               500               20          10   \n",
       "2                  15360               500               20          10   \n",
       "3                  15360               500               20          10   \n",
       "4                  15360               500               20          10   \n",
       "5                  15360               500               20          10   \n",
       "\n",
       "   usd_per_message  usd_per_minute plan_name  gb_per_month_included  \\\n",
       "1             0.03            0.03      surf                     15   \n",
       "2             0.03            0.03      surf                     15   \n",
       "3             0.03            0.03      surf                     15   \n",
       "4             0.03            0.03      surf                     15   \n",
       "5             0.03            0.03      surf                     15   \n",
       "\n",
       "   monthly_profit  \n",
       "1        69041.51  \n",
       "2       133002.80  \n",
       "3       223162.32  \n",
       "4       184900.81  \n",
       "5       193549.28  "
      ]
     },
     "execution_count": 776,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Comprobar para clientes Surf\n",
    "surf_user_monthly.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 777,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_min_month</th>\n",
       "      <th>number_of_calls</th>\n",
       "      <th>total_messages_month</th>\n",
       "      <th>mb_used_month</th>\n",
       "      <th>gb_used_month</th>\n",
       "      <th>plan</th>\n",
       "      <th>state</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>gb_per_month_included</th>\n",
       "      <th>monthly_profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>2.0</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>30</td>\n",
       "      <td>13124.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1006</td>\n",
       "      <td>11.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>2068.37</td>\n",
       "      <td>3.0</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>CA</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>30</td>\n",
       "      <td>14291.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>1006</td>\n",
       "      <td>12.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>139.0</td>\n",
       "      <td>32118.82</td>\n",
       "      <td>32.0</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>CA</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>30</td>\n",
       "      <td>224646.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1008</td>\n",
       "      <td>10.0</td>\n",
       "      <td>493.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>17106.99</td>\n",
       "      <td>17.0</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>FL</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>30</td>\n",
       "      <td>119567.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>1008</td>\n",
       "      <td>11.0</td>\n",
       "      <td>459.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>23676.72</td>\n",
       "      <td>24.0</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>FL</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>30</td>\n",
       "      <td>165555.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    user_id  month  total_min_month  number_of_calls  total_messages_month  \\\n",
       "0      1000   12.0            124.0             16.0                  11.0   \n",
       "19     1006   11.0             10.0              2.0                  15.0   \n",
       "20     1006   12.0             61.0              9.0                 139.0   \n",
       "26     1008   10.0            493.0             71.0                  21.0   \n",
       "27     1008   11.0            459.0             63.0                  37.0   \n",
       "\n",
       "    mb_used_month  gb_used_month      plan state  messages_included  \\\n",
       "0         1901.47            2.0  ultimate    GA               1000   \n",
       "19        2068.37            3.0  ultimate    CA               1000   \n",
       "20       32118.82           32.0  ultimate    CA               1000   \n",
       "26       17106.99           17.0  ultimate    FL               1000   \n",
       "27       23676.72           24.0  ultimate    FL               1000   \n",
       "\n",
       "    mb_per_month_included  minutes_included  usd_monthly_pay  usd_per_gb  \\\n",
       "0                   30720              3000               70           7   \n",
       "19                  30720              3000               70           7   \n",
       "20                  30720              3000               70           7   \n",
       "26                  30720              3000               70           7   \n",
       "27                  30720              3000               70           7   \n",
       "\n",
       "    usd_per_message  usd_per_minute plan_name  gb_per_month_included  \\\n",
       "0              0.01            0.01  ultimate                     30   \n",
       "19             0.01            0.01  ultimate                     30   \n",
       "20             0.01            0.01  ultimate                     30   \n",
       "26             0.01            0.01  ultimate                     30   \n",
       "27             0.01            0.01  ultimate                     30   \n",
       "\n",
       "    monthly_profit  \n",
       "0         13124.64  \n",
       "19        14291.84  \n",
       "20       224646.74  \n",
       "26       119567.07  \n",
       "27       165555.00  "
      ]
     },
     "execution_count": 777,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Comprobar para clientes Ultimate\n",
    "ultimate_user_monthly.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 778,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Trazar histogramas para comparar la cantidad de minutos que los usuarios de cada plan requieren cada mes\n",
    "surf_user_monthly['total_min_month'].plot(kind='hist',figsize=(10,8))\n",
    "ultimate_user_monthly['total_min_month'].plot(kind='hist',figsize=(10,8))\n",
    "plt.title('Número de minutos que los usuarios requieren cada mes de cada plan')\n",
    "plt.legend(['Surf', 'Ultimate'])\n",
    "plt.xlabel('Cantidad de minutes')\n",
    "plt.xlabel('Number of minutes')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conclusion intermedia**\n",
    "1. Tanto Ultimate como Surf alcanzaron su punto máximo durante unos 500 minutos, con una distribución sesgada hacia la izquierda. \n",
    "2. El límite de duración de la llamada lo superan un gran número de usuarios de Surf, pero ningún usuario de Ultimate.\n",
    "\n",
    "Recordemos que Surf ofrece 500 minutos al mes y Ultimate, 3000 minutos al mes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vamos a calcular la media y la variable de la duración de la llamada para concluir si los usuarios de diferentes planes muestran comportamientos distintos para sus llamadas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 779,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duración promedio de las llamadas mensuales en minutos del plan \"Surf\": 440\n",
      "Desviación estándar de la duración de las llamadas mensuales en minutos del plan \"Surf\": 240\n"
     ]
    }
   ],
   "source": [
    "# Calcula la media y la varianza de la duración mensual de llamadas para Surf.\n",
    "\n",
    "print('Duración promedio de las llamadas mensuales en minutos del plan \"Surf\": {:.0f}'.format(surf_user_monthly['total_min_month'].mean()))\n",
    "print('Desviación estándar de la duración de las llamadas mensuales en minutos del plan \"Surf\": {:.0f}'.format(surf_user_monthly['total_min_month'].std()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 780,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duración promedio de las llamadas mensuales en minutos del plan \"Ultimate\": 442\n",
      "Desviación estándar de la duración de las llamadas mensuales en minutos del plan \"Ultimate\": 247\n"
     ]
    }
   ],
   "source": [
    "# Calcula la media y la varianza de la duración mensual de llamadas para Ultimate.\n",
    "print('Duración promedio de las llamadas mensuales en minutos del plan \"Ultimate\": {:.0f}'.format(ultimate_user_monthly['total_min_month'].mean()))\n",
    "print('Desviación estándar de la duración de las llamadas mensuales en minutos del plan \"Ultimate\": {:.0f}'.format(ultimate_user_monthly['total_min_month'].std()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 781,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Traza un diagrama de caja para visualizar la distribución de la duración mensual de llamadas.\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.boxplot(user_monthly['total_min_month'])\n",
    "plt.title('Distribución de la duración mensual de llamadas')\n",
    "plt.ylabel('Duración de llamadas (minutos)')\n",
    "plt.xticks([1], ['Total de minutos'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conclusiones:**\n",
    "\n",
    "1. La duración media de las llamadas mensuales es casi la misma (alrededor de 430-450 minutos por mes) para ambos planes, lo que es una señal de una distribución cercana a la normal. Las desviaciones estándar también son bastante cercanas (alrededor de 220-230 minutos).\n",
    "2. Del diagrama de cajas podemos ver que existen varios puntos por fuera del extremo superior; sin embargo se puede inferir que son usuarios del plan Ultimate, con hasta 3000 minutos al mes.\n",
    "3. Del diagrama de cajas podemos ver que la mediana es similar a la media que hayamos anteriormente."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Mensajes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 782,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 648x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Comprara el número de mensajes que tienden a enviar cada mes los usuarios de cada plan\n",
    "plt.figure(figsize=(10, 6))\n",
    "surf_user_monthly['total_messages_month'].plot(kind='hist',figsize=(9,5))\n",
    "ultimate_user_monthly['total_messages_month'].plot(kind='hist',figsize=(9,5))\n",
    "plt.title('Distribución del número de mensajes por mes para cada plan')\n",
    "plt.xlabel('Número de mensajes')\n",
    "plt.ylabel('Frecuencia')\n",
    "plt.legend(['Surf', 'Ultimate'])\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 783,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Número promedio mensual de mensajes enviados del plan \"Surf\": 31\n",
      "Desviación estándar mensual de mensajes enviados del plan \"Surf\": 34\n"
     ]
    }
   ],
   "source": [
    "# Calcula la media y la varianza de mensajes enviados con Surf.\n",
    "\n",
    "print('Número promedio mensual de mensajes enviados del plan \"Surf\": {:.0f}'.format(surf_user_monthly['total_messages_month'].mean()))\n",
    "print('Desviación estándar mensual de mensajes enviados del plan \"Surf\": {:.0f}'.format(surf_user_monthly['total_messages_month'].std()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 784,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Número promedio mensual de mensajes enviados del plan \"Surf\": 38\n",
      "Desviación estándar mensual de mensajes enviados del plan \"Surf\": 35\n"
     ]
    }
   ],
   "source": [
    "# Calcula la media y la varianza de mensajes enviados con Ultimate.\n",
    "\n",
    "print('Número promedio mensual de mensajes enviados del plan \"Surf\": {:.0f}'.format(ultimate_user_monthly['total_messages_month'].mean()))\n",
    "print('Desviación estándar mensual de mensajes enviados del plan \"Surf\": {:.0f}'.format(ultimate_user_monthly['total_messages_month'].std()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conclusiones** \n",
    "1. Encontramos que el promedio mensual de mensajes enviados del plan Surf fueron 30; cabe recordar que Surf ofrece 50 SMS al mes, lo cual indica que la mayoria de usuarios intentan enviar mensajes dentro del limite del plan.\n",
    "2. En el caso de Ultimate, el promedio mensual de mensajes enviados fueron 37; cabe recordar que Ultimate ofrece 1,000 SMS al mes, lo cual indica que la mayoria de usuarios no están enviando mensajes.  Aquí es donde la empresa pierde ingresos extra ya que no habría recargo en este servicio. Podríamos recomendar a la compañia revisar esta cantidad.\n",
    "3. Ambos planes muestran el mismo panorama: estas distribuciones están sesgadas positivamente.\n",
    "4. Ambos planes muestran una desviación estándar bastante grande, casi igual a la media."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Internet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 785,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compara la cantidad de tráfico de internet consumido por usuarios por plan\n",
    "plt.figure(figsize=(10, 6))\n",
    "surf_user_monthly['gb_used_month'].plot(kind='hist',figsize=(9,5))\n",
    "ultimate_user_monthly['gb_used_month'].plot(kind='hist',figsize=(9,5))\n",
    "plt.title('Distribución del tráfico de internet consumido por mes para cada plan')\n",
    "plt.xlabel('Tráfico de internet consumido (GB)')\n",
    "plt.ylabel('Frecuencia')\n",
    "plt.legend(['Surf', 'Ultimate'])\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 786,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Número promedio mensual de tráfico de internet del plan \"Surf\": 17\n",
      "Desviación estándar mensual de mensajes enviados del plan \"Surf\": 8\n"
     ]
    }
   ],
   "source": [
    "# Calcula la media y la varianza del tráfico de internet consumido por usuarios con Surf.\n",
    "\n",
    "print('Número promedio mensual de tráfico de internet del plan \"Surf\": {:.0f}'.format(surf_user_monthly['gb_used_month'].mean()))\n",
    "print('Desviación estándar mensual de mensajes enviados del plan \"Surf\": {:.0f}'.format(surf_user_monthly['gb_used_month'].std()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 787,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Número promedio mensual de tráfico de internet del plan \"Ultimate\": 17\n",
      "Desviación estándar mensual de mensajes enviados del plan \"Ultimate\": 8\n"
     ]
    }
   ],
   "source": [
    "# Calcula la media y la varianza del tráfico de internet consumido por usuarios con Ultimate.\n",
    "\n",
    "print('Número promedio mensual de tráfico de internet del plan \"Ultimate\": {:.0f}'.format(ultimate_user_monthly['gb_used_month'].mean()))\n",
    "print('Desviación estándar mensual de mensajes enviados del plan \"Ultimate\": {:.0f}'.format(ultimate_user_monthly['gb_used_month'].std()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conclusiones** \n",
    "1. Encontramos que el promedio mensual del tráfico de internet consumido por usuarios con el plan Surf fueron 17; cabe recordar que Surf ofrece 15 GB al mes, lo cual indica que la mayoria de usuarios usan más de indica que los usuarios se están pasandose del plan.  Aquí es donde la empresa genera ingresos extra ya que hay recargo en este servicio.\n",
    "\n",
    "2. En el caso de Ultimate, el promedio mensual de tráfico de internet consumido por usuarios fueron 19, lo cual es muy similar a Surf. Cabe recordar que Ultimate ofrece 13GB al mes, lo cual indica que la mayoria de usuarios están pasandose del plan.  Aquí es donde la empresa genera ingresos extra ya que hay recargo en este servicio.\n",
    "\n",
    "3. Ambos planes muestran el mismo panorama: estas distribuciones están sesgadas hacia la izquierda.\n",
    "\n",
    "4. Ambos planes muestran una desviación estándar normal de 8 GB."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ingreso"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 788,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_min_month</th>\n",
       "      <th>number_of_calls</th>\n",
       "      <th>total_messages_month</th>\n",
       "      <th>mb_used_month</th>\n",
       "      <th>gb_used_month</th>\n",
       "      <th>plan</th>\n",
       "      <th>state</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>gb_per_month_included</th>\n",
       "      <th>monthly_profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>2.0</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>30</td>\n",
       "      <td>13124.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6919.15</td>\n",
       "      <td>7.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>69041.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9.0</td>\n",
       "      <td>326.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13314.82</td>\n",
       "      <td>14.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>133002.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>411.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>22330.49</td>\n",
       "      <td>22.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>223162.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11.0</td>\n",
       "      <td>441.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18504.30</td>\n",
       "      <td>19.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>184900.81</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_min_month  number_of_calls  total_messages_month  \\\n",
       "0     1000   12.0            124.0             16.0                  11.0   \n",
       "1     1001    8.0            187.0             27.0                  30.0   \n",
       "2     1001    9.0            326.0             49.0                  44.0   \n",
       "3     1001   10.0            411.0             65.0                  53.0   \n",
       "4     1001   11.0            441.0             64.0                  36.0   \n",
       "\n",
       "   mb_used_month  gb_used_month      plan state  messages_included  \\\n",
       "0        1901.47            2.0  ultimate    GA               1000   \n",
       "1        6919.15            7.0      surf    WA                 50   \n",
       "2       13314.82           14.0      surf    WA                 50   \n",
       "3       22330.49           22.0      surf    WA                 50   \n",
       "4       18504.30           19.0      surf    WA                 50   \n",
       "\n",
       "   mb_per_month_included  minutes_included  usd_monthly_pay  usd_per_gb  \\\n",
       "0                  30720              3000               70           7   \n",
       "1                  15360               500               20          10   \n",
       "2                  15360               500               20          10   \n",
       "3                  15360               500               20          10   \n",
       "4                  15360               500               20          10   \n",
       "\n",
       "   usd_per_message  usd_per_minute plan_name  gb_per_month_included  \\\n",
       "0             0.01            0.01  ultimate                     30   \n",
       "1             0.03            0.03      surf                     15   \n",
       "2             0.03            0.03      surf                     15   \n",
       "3             0.03            0.03      surf                     15   \n",
       "4             0.03            0.03      surf                     15   \n",
       "\n",
       "   monthly_profit  \n",
       "0        13124.64  \n",
       "1        69041.51  \n",
       "2       133002.80  \n",
       "3       223162.32  \n",
       "4       184900.81  "
      ]
     },
     "execution_count": 788,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user_monthly.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 789,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculemos los ingresos mensuales de cada usuario.\n",
    "\n",
    "def calculate_monthly_revenue(row):\n",
    "    \n",
    "    plan_monthly_charge = row.usd_monthly_pay\n",
    "    \n",
    "    # Calcular los ingresos por llamadas, si el usuario excedió el límite cubierto por el plan\n",
    "    extra_call_mins = row.total_min_month - row.minutes_included\n",
    "    if extra_call_mins > 0:\n",
    "        call_revenue = extra_call_mins * row.usd_per_minute\n",
    "    else:\n",
    "        call_revenue = 0\n",
    "    \n",
    "    # Calcular los ingresos por mensajes, si el usuario excedió el límite cubierto por el plan\n",
    "    extra_messages = row.total_messages_month - row.messages_included\n",
    "    if extra_messages > 0:\n",
    "        message_revenue = extra_messages * row.usd_per_message\n",
    "    else:\n",
    "        message_revenue = 0\n",
    "    \n",
    "    # Calcular los ingresos por el uso de Internet, si el usuario excedió el límite cubierto por el plan\n",
    "    extra_internet_gb = (row.gb_used_month - row.gb_per_month_included)\n",
    "    if extra_internet_gb > 0:\n",
    "        internet_revenue = extra_internet_gb * row.usd_per_gb\n",
    "    else:\n",
    "        internet_revenue = 0\n",
    "        \n",
    "    monthly_revenue = plan_monthly_charge + call_revenue + message_revenue + internet_revenue\n",
    "    \n",
    "    return monthly_revenue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 790,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calcular los ingresos mensuales de cada usuario.\n",
    "user_monthly['usd_monthly_revenue'] = user_monthly.apply(calculate_monthly_revenue, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 791,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>plan</th>\n",
       "      <th>surf</th>\n",
       "      <th>ultimate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>20.000000</td>\n",
       "      <td>70.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.0</th>\n",
       "      <td>34.456667</td>\n",
       "      <td>70.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.0</th>\n",
       "      <td>45.996087</td>\n",
       "      <td>74.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.0</th>\n",
       "      <td>40.832400</td>\n",
       "      <td>73.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.0</th>\n",
       "      <td>47.834286</td>\n",
       "      <td>70.724138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.0</th>\n",
       "      <td>49.455052</td>\n",
       "      <td>71.638298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.0</th>\n",
       "      <td>62.904628</td>\n",
       "      <td>71.898305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8.0</th>\n",
       "      <td>64.118765</td>\n",
       "      <td>72.859155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.0</th>\n",
       "      <td>58.444845</td>\n",
       "      <td>72.034884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.0</th>\n",
       "      <td>65.618059</td>\n",
       "      <td>72.311321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11.0</th>\n",
       "      <td>58.185548</td>\n",
       "      <td>71.708661</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12.0</th>\n",
       "      <td>70.783648</td>\n",
       "      <td>73.291391</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "plan        surf   ultimate\n",
       "month                      \n",
       "1.0    20.000000  70.000000\n",
       "2.0    34.456667  70.000000\n",
       "3.0    45.996087  74.666667\n",
       "4.0    40.832400  73.000000\n",
       "5.0    47.834286  70.724138\n",
       "6.0    49.455052  71.638298\n",
       "7.0    62.904628  71.898305\n",
       "8.0    64.118765  72.859155\n",
       "9.0    58.444845  72.034884\n",
       "10.0   65.618059  72.311321\n",
       "11.0   58.185548  71.708661\n",
       "12.0   70.783648  73.291391"
      ]
     },
     "execution_count": 791,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compare los ingresos promedio por cada plan por cada mes distinto\n",
    "mean_revenue = user_monthly.pivot_table(index='month', columns='plan', aggfunc='mean', values='usd_monthly_revenue')\n",
    "mean_revenue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 792,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_monthly_revenue</th>\n",
       "      <th>var_monthly_revenue</th>\n",
       "      <th>std_monthly_revenue</th>\n",
       "      <th>median_monthly_revenue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>plan</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>surf</th>\n",
       "      <td>60.899053</td>\n",
       "      <td>3075.367902</td>\n",
       "      <td>55.456000</td>\n",
       "      <td>40.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ultimate</th>\n",
       "      <td>72.313889</td>\n",
       "      <td>129.848486</td>\n",
       "      <td>11.395108</td>\n",
       "      <td>70.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          mean_monthly_revenue  var_monthly_revenue  std_monthly_revenue  \\\n",
       "plan                                                                       \n",
       "surf                 60.899053          3075.367902            55.456000   \n",
       "ultimate             72.313889           129.848486            11.395108   \n",
       "\n",
       "          median_monthly_revenue  \n",
       "plan                              \n",
       "surf                       40.42  \n",
       "ultimate                   70.00  "
      ]
     },
     "execution_count": 792,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calcular la media y la varianza de los ingresos mensuales\n",
    "monthly_revenue_stats = user_monthly.pivot_table(index='plan', values='usd_monthly_revenue', aggfunc=['mean', 'var', 'std', 'median'])\n",
    "monthly_revenue_stats.columns = ['mean_monthly_revenue', 'var_monthly_revenue', 'std_monthly_revenue', 'median_monthly_revenue']\n",
    "monthly_revenue_stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Observaciones**\n",
    "\n",
    "1. En promedio, los clientes del plan Ultimate generan mayores ingresos por mes en comparación con los del plan Surf.\n",
    "2. La variación en los ingresos mensuales de Surf es significativamente mayor que la de Ultimate, lo que indica que hay más variabilidad en los ingresos mensuales del plan Surf en comparación con el plan Ultimate.\n",
    "3. La desviación estándar de los ingresos mensuales de Surf es 51.16, que es mayor que la de Ultimate (12.07). Esto significa que los ingresos del plan Surf están más dispersos en comparación con los del plan Ultimate.\n",
    "4. El ingreso mensual medio de Ultimate es 70, mientras que el de Surf es 40. Esto indica que al menos la mitad de los clientes del plan Ultimate generan ingresos de 70 por mes, mientras que la mitad de los clientes del plan Surf generan ingresos de 40 o menos por mes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 793,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Trazar un diagrama de barras para visualizar 'mean_revenue'\n",
    "mean_revenue.plot(kind='bar', figsize=(16,8))\n",
    "plt.title('Ingresos promedio por cada plan por cada mes distinto')\n",
    "plt.ylabel('USD')\n",
    "plt.xlabel('Meses')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 794,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>plan</th>\n",
       "      <th>surf</th>\n",
       "      <th>ultimate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>51.552499</td>\n",
       "      <td>72.011068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>14.764229</td>\n",
       "      <td>1.364068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>20.000000</td>\n",
       "      <td>70.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>44.705165</td>\n",
       "      <td>71.409758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>53.820300</td>\n",
       "      <td>71.966594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>63.208162</td>\n",
       "      <td>72.894366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>70.783648</td>\n",
       "      <td>74.666667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "plan        surf   ultimate\n",
       "count  12.000000  12.000000\n",
       "mean   51.552499  72.011068\n",
       "std    14.764229   1.364068\n",
       "min    20.000000  70.000000\n",
       "25%    44.705165  71.409758\n",
       "50%    53.820300  71.966594\n",
       "75%    63.208162  72.894366\n",
       "max    70.783648  74.666667"
      ]
     },
     "execution_count": 794,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_revenue.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conclusiones:**\n",
    "1. La mediana del plan Surf es alrededor del precio del plan. Sin embargo, para Ultimate observamos que usuarios tienden a pagar recargo.\n",
    "2. Surf tiene desviación estandar grande en comparación con Ultimate.\n",
    "3. Se observa que usuarios han pagado recargo en ambos planes. Lo máximo que un usuario ha pagado para Surf es $65 aproximadamente y $74 aproximadamente con Ultimate.\n",
    "4. Los ingresos promedio del plan Ultimate son consistentemente más altos que los del plan Surf en todos los meses.\n",
    "5. En general, estas estadísticas sugieren que el plan Ultimate es más rentable para Megaline, ya que los clientes de este plan generan mayores ingresos en promedio y los ingresos son más consistentes en comparación con el plan Surf."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Probar las hipótesis estadísticas."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hipótesis 1:\n",
    "\n",
    "Probemos la hipótesis de que los ingresos promedio de los usuarios de los planes de llamadas Ultimate y Surf difieren. Para probar la hipótesis, formulemos la hipótesis nula y la alternativa."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Hipótesis nula:** los ingresos medios de los usuarios de los planes de llamadas Ultimate y Surf son iguales.\n",
    "\n",
    "**Hipótesis alternativa:** Los ingresos promedio de los usuarios del plan de llamadas Surf son diferentes a los del plan de llamadas Ultimate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 795,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_min_month</th>\n",
       "      <th>number_of_calls</th>\n",
       "      <th>total_messages_month</th>\n",
       "      <th>mb_used_month</th>\n",
       "      <th>gb_used_month</th>\n",
       "      <th>plan</th>\n",
       "      <th>state</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>gb_per_month_included</th>\n",
       "      <th>monthly_profit</th>\n",
       "      <th>usd_monthly_revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>2.0</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>30</td>\n",
       "      <td>13124.64</td>\n",
       "      <td>70.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6919.15</td>\n",
       "      <td>7.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>69041.51</td>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9.0</td>\n",
       "      <td>326.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13314.82</td>\n",
       "      <td>14.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>133002.80</td>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>411.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>22330.49</td>\n",
       "      <td>22.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>223162.32</td>\n",
       "      <td>90.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11.0</td>\n",
       "      <td>441.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18504.30</td>\n",
       "      <td>19.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>184900.81</td>\n",
       "      <td>60.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_min_month  number_of_calls  total_messages_month  \\\n",
       "0     1000   12.0            124.0             16.0                  11.0   \n",
       "1     1001    8.0            187.0             27.0                  30.0   \n",
       "2     1001    9.0            326.0             49.0                  44.0   \n",
       "3     1001   10.0            411.0             65.0                  53.0   \n",
       "4     1001   11.0            441.0             64.0                  36.0   \n",
       "\n",
       "   mb_used_month  gb_used_month      plan state  messages_included  \\\n",
       "0        1901.47            2.0  ultimate    GA               1000   \n",
       "1        6919.15            7.0      surf    WA                 50   \n",
       "2       13314.82           14.0      surf    WA                 50   \n",
       "3       22330.49           22.0      surf    WA                 50   \n",
       "4       18504.30           19.0      surf    WA                 50   \n",
       "\n",
       "   mb_per_month_included  minutes_included  usd_monthly_pay  usd_per_gb  \\\n",
       "0                  30720              3000               70           7   \n",
       "1                  15360               500               20          10   \n",
       "2                  15360               500               20          10   \n",
       "3                  15360               500               20          10   \n",
       "4                  15360               500               20          10   \n",
       "\n",
       "   usd_per_message  usd_per_minute plan_name  gb_per_month_included  \\\n",
       "0             0.01            0.01  ultimate                     30   \n",
       "1             0.03            0.03      surf                     15   \n",
       "2             0.03            0.03      surf                     15   \n",
       "3             0.03            0.03      surf                     15   \n",
       "4             0.03            0.03      surf                     15   \n",
       "\n",
       "   monthly_profit  usd_monthly_revenue  \n",
       "0        13124.64                70.00  \n",
       "1        69041.51                20.00  \n",
       "2       133002.80                20.00  \n",
       "3       223162.32                90.09  \n",
       "4       184900.81                60.00  "
      ]
     },
     "execution_count": 795,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user_monthly.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 796,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id\n",
       "1001     50.018000\n",
       "1002     33.333333\n",
       "1003    159.050000\n",
       "1004     76.250000\n",
       "1005     40.150000\n",
       "Name: usd_monthly_revenue, dtype: float64"
      ]
     },
     "execution_count": 796,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Ingresos medios de los usuarios del plan Surf\n",
    "surf_mean_user_revenue = user_monthly[user_monthly['plan'] == 'surf'].groupby('user_id')['usd_monthly_revenue'].mean()\n",
    "surf_mean_user_revenue.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 797,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id\n",
       "1000    70.0\n",
       "1006    77.0\n",
       "1008    70.0\n",
       "1011    70.0\n",
       "1013    70.0\n",
       "Name: usd_monthly_revenue, dtype: float64"
      ]
     },
     "execution_count": 797,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Ingresos medios de los usuarios del plan Ultimate\n",
    "ultimate_mean_user_revenue = user_monthly[user_monthly['plan'] == 'ultimate'].groupby('user_id')['usd_monthly_revenue'].mean()\n",
    "ultimate_mean_user_revenue.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 798,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value: 0.0001419783641714099\n",
      "Rechazamos la hipótesis nula\n"
     ]
    }
   ],
   "source": [
    "# Prueba las hipótesis 1\n",
    "alpha = 0.05 \n",
    "\n",
    "results = st.ttest_ind(surf_mean_user_revenue, ultimate_mean_user_revenue)\n",
    "\n",
    "print('p-value:', results.pvalue)\n",
    "\n",
    "if (results.pvalue < alpha):\n",
    "    print(\"Rechazamos la hipótesis nula\")\n",
    "else:\n",
    "    print(\"No podemos rechazar la hipótesis nula\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conclusión:**\n",
    "En esta prueba se rechaza la hipótesis nula, lo que implica que los ingresos promedio de los usuarios de los planes telefónicos Ultimate y Surf no son iguales."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hipótesis 2:\n",
    "\n",
    "Comprobar la hipótesis de que el ingreso promedio de los usuarios del área NY-NJ es diferente al de los usuarios de otras regiones."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Hipótesis nula:** Los ingresos promedio de los usuarios del área NY-NJ es igual al de los usuarios de otras regiones.\n",
    "\n",
    "**Hipótesis alternativa:** Los ingresos promedio de los usuarios del área NY-NJ es diferente al de los usuarios de otras regiones."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 799,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['GA', 'WA', 'NV', 'OK', 'TX', 'CA', 'MI', 'FL', 'OH', 'WI', 'TN',\n",
       "       'PA', 'WV', 'IN', 'IA', 'MD', 'AL', 'SC', 'CO', 'NM', 'NH', 'AZ',\n",
       "       'NY', 'AR', 'MA', 'HI', 'CT', 'LA', 'NC', 'VA', 'IL', 'KS', 'UT'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 799,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user_monthly['state'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**NY-NJ**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 800,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_min_month</th>\n",
       "      <th>number_of_calls</th>\n",
       "      <th>total_messages_month</th>\n",
       "      <th>mb_used_month</th>\n",
       "      <th>gb_used_month</th>\n",
       "      <th>plan</th>\n",
       "      <th>state</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>gb_per_month_included</th>\n",
       "      <th>monthly_profit</th>\n",
       "      <th>usd_monthly_revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>355</th>\n",
       "      <td>1076</td>\n",
       "      <td>7.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>113.74</td>\n",
       "      <td>1.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>NY</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>982.07</td>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>356</th>\n",
       "      <td>1076</td>\n",
       "      <td>8.0</td>\n",
       "      <td>405.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>25517.58</td>\n",
       "      <td>25.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>NY</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>255036.13</td>\n",
       "      <td>123.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>357</th>\n",
       "      <td>1076</td>\n",
       "      <td>9.0</td>\n",
       "      <td>373.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>145.0</td>\n",
       "      <td>23134.42</td>\n",
       "      <td>23.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>NY</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>231203.24</td>\n",
       "      <td>102.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>358</th>\n",
       "      <td>1076</td>\n",
       "      <td>10.0</td>\n",
       "      <td>326.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>159.0</td>\n",
       "      <td>21310.96</td>\n",
       "      <td>21.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>NY</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>212967.65</td>\n",
       "      <td>83.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>359</th>\n",
       "      <td>1076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>390.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>139.0</td>\n",
       "      <td>21318.64</td>\n",
       "      <td>21.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>NY</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>213045.77</td>\n",
       "      <td>82.67</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id  month  total_min_month  number_of_calls  total_messages_month  \\\n",
       "355     1076    7.0             30.0              4.0                   9.0   \n",
       "356     1076    8.0            405.0             54.0                 156.0   \n",
       "357     1076    9.0            373.0             53.0                 145.0   \n",
       "358     1076   10.0            326.0             50.0                 159.0   \n",
       "359     1076   11.0            390.0             57.0                 139.0   \n",
       "\n",
       "     mb_used_month  gb_used_month  plan state  messages_included  \\\n",
       "355         113.74            1.0  surf    NY                 50   \n",
       "356       25517.58           25.0  surf    NY                 50   \n",
       "357       23134.42           23.0  surf    NY                 50   \n",
       "358       21310.96           21.0  surf    NY                 50   \n",
       "359       21318.64           21.0  surf    NY                 50   \n",
       "\n",
       "     mb_per_month_included  minutes_included  usd_monthly_pay  usd_per_gb  \\\n",
       "355                  15360               500               20          10   \n",
       "356                  15360               500               20          10   \n",
       "357                  15360               500               20          10   \n",
       "358                  15360               500               20          10   \n",
       "359                  15360               500               20          10   \n",
       "\n",
       "     usd_per_message  usd_per_minute plan_name  gb_per_month_included  \\\n",
       "355             0.03            0.03      surf                     15   \n",
       "356             0.03            0.03      surf                     15   \n",
       "357             0.03            0.03      surf                     15   \n",
       "358             0.03            0.03      surf                     15   \n",
       "359             0.03            0.03      surf                     15   \n",
       "\n",
       "     monthly_profit  usd_monthly_revenue  \n",
       "355          982.07                20.00  \n",
       "356       255036.13               123.18  \n",
       "357       231203.24               102.85  \n",
       "358       212967.65                83.27  \n",
       "359       213045.77                82.67  "
      ]
     },
     "execution_count": 800,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ny_nj_user_monthly = user_monthly[user_monthly['state'].str.contains('NY')]\n",
    "ny_nj_user_monthly.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 801,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id\n",
       "1076     74.071667\n",
       "1098    148.448000\n",
       "1192     22.250000\n",
       "1302     73.152500\n",
       "1377     82.116667\n",
       "Name: usd_monthly_revenue, dtype: float64"
      ]
     },
     "execution_count": 801,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Ingresos promedio de usuarios que se encuentran en el área de NY-NJ\n",
    "ny_nj_mean_user_revenue = ny_nj_user_monthly.groupby('user_id')['usd_monthly_revenue'].mean()\n",
    "ny_nj_mean_user_revenue.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**OTROS ESTADOS**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 802,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_min_month</th>\n",
       "      <th>number_of_calls</th>\n",
       "      <th>total_messages_month</th>\n",
       "      <th>mb_used_month</th>\n",
       "      <th>gb_used_month</th>\n",
       "      <th>plan</th>\n",
       "      <th>state</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>gb_per_month_included</th>\n",
       "      <th>monthly_profit</th>\n",
       "      <th>usd_monthly_revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12.0</td>\n",
       "      <td>124.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>2.0</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>GA</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>30</td>\n",
       "      <td>13124.64</td>\n",
       "      <td>70.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>6919.15</td>\n",
       "      <td>7.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>69041.51</td>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9.0</td>\n",
       "      <td>326.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13314.82</td>\n",
       "      <td>14.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>133002.80</td>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>411.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>22330.49</td>\n",
       "      <td>22.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>223162.32</td>\n",
       "      <td>90.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11.0</td>\n",
       "      <td>441.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>18504.30</td>\n",
       "      <td>19.0</td>\n",
       "      <td>surf</td>\n",
       "      <td>WA</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>15</td>\n",
       "      <td>184900.81</td>\n",
       "      <td>60.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_min_month  number_of_calls  total_messages_month  \\\n",
       "0     1000   12.0            124.0             16.0                  11.0   \n",
       "1     1001    8.0            187.0             27.0                  30.0   \n",
       "2     1001    9.0            326.0             49.0                  44.0   \n",
       "3     1001   10.0            411.0             65.0                  53.0   \n",
       "4     1001   11.0            441.0             64.0                  36.0   \n",
       "\n",
       "   mb_used_month  gb_used_month      plan state  messages_included  \\\n",
       "0        1901.47            2.0  ultimate    GA               1000   \n",
       "1        6919.15            7.0      surf    WA                 50   \n",
       "2       13314.82           14.0      surf    WA                 50   \n",
       "3       22330.49           22.0      surf    WA                 50   \n",
       "4       18504.30           19.0      surf    WA                 50   \n",
       "\n",
       "   mb_per_month_included  minutes_included  usd_monthly_pay  usd_per_gb  \\\n",
       "0                  30720              3000               70           7   \n",
       "1                  15360               500               20          10   \n",
       "2                  15360               500               20          10   \n",
       "3                  15360               500               20          10   \n",
       "4                  15360               500               20          10   \n",
       "\n",
       "   usd_per_message  usd_per_minute plan_name  gb_per_month_included  \\\n",
       "0             0.01            0.01  ultimate                     30   \n",
       "1             0.03            0.03      surf                     15   \n",
       "2             0.03            0.03      surf                     15   \n",
       "3             0.03            0.03      surf                     15   \n",
       "4             0.03            0.03      surf                     15   \n",
       "\n",
       "   monthly_profit  usd_monthly_revenue  \n",
       "0        13124.64                70.00  \n",
       "1        69041.51                20.00  \n",
       "2       133002.80                20.00  \n",
       "3       223162.32                90.09  \n",
       "4       184900.81                60.00  "
      ]
     },
     "execution_count": 802,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Ingresos promedio de usuarios que no se encuentran en el área de Nueva York y Nueva Jersey\n",
    "other_states_user_monthly = user_monthly[~user_monthly['state'].str.contains('NY')]\n",
    "other_states_user_monthly.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 803,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id\n",
       "1000     70.000000\n",
       "1001     50.018000\n",
       "1002     33.333333\n",
       "1003    159.050000\n",
       "1004     76.250000\n",
       "Name: usd_monthly_revenue, dtype: float64"
      ]
     },
     "execution_count": 803,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Ingresos promedio de usuarios que no se encuentran en el área de NY-NJ\n",
    "other_states_mean_user_revenue = other_states_user_monthly.groupby('user_id')['usd_monthly_revenue'].mean()\n",
    "other_states_mean_user_revenue.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 804,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value: 0.6200856765260465\n",
      "No podemos rechazar la hipótesis nula\n"
     ]
    }
   ],
   "source": [
    "# Prueba las hipótesis 2\n",
    "alpha = 0.05\n",
    "\n",
    "results = st.ttest_ind(ny_nj_mean_user_revenue, other_states_mean_user_revenue)\n",
    "\n",
    "print('p-value:', results.pvalue)\n",
    "\n",
    "if (results.pvalue < alpha):\n",
    "    print(\"Rechazamos la hipótesis nula\")\n",
    "else:\n",
    "    print(\"No podemos rechazar la hipótesis nula\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conclusión:**\n",
    "\n",
    "No podemos rechazar la hipótesis nula, lo que significa que el ingreso promedio de los usuarios del área NY-NJ es igual al de los usuarios de los otros estados."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusión general\n",
    "\n",
    "El objetivo de este proyecto es analizar el comportamiento de los clientes y determinar qué plan prepago genera más ingresos. Los resultados del análisis son:\n",
    "\n",
    "1. Ambos planes muestran una tendencia general de aumento de la duración promedio de las llamadas de enero a diciembre, lo que podría indicar un efecto estacional o una tendencia en el comportamiento de los clientes.\n",
    "\n",
    "2. La cantidad promedio de mensajes enviados por los usuarios del plan Surf y Ultimate es relativamente baja, y la mayoría de los meses tienen un promedio de menos de 40 mensajes por mes.\n",
    "\n",
    "3. Enero parece ser el mes con menor uso de Internet para ambos planes.\n",
    "\n",
    "4. El plan Ultimate es más rentable para Megaline, ya que los clientes del plan Ultimate probablemente están usando más funciones y servicios adicionales que ofrece el plan, como límites de datos más altos.\n",
    "\n",
    "5. La mayoría de los usuarios de Surf tienden a superar su límite de uso mensual. Sin embargo, los ingresos promedio del plan Ultimate son consistentemente más altos que los del plan Surf en todos los meses.\n",
    "\n",
    "6. Los ingresos promedio de los usuarios de los planes telefónicos Ultimate y Surf no son iguales.\n",
    "\n",
    "7. Los ingresos promedio de los usuarios en la región NY-NJ son iguales a los ingresos de los usuarios de otros estados.\n",
    "\n",
    "4. En promedio, los clientes del plan Ultimate generan mayores ingresos por mes en comparación con los del plan Surf.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 828,
    "start_time": "2021-11-16T09:21:11.304Z"
   },
   {
    "duration": 893,
    "start_time": "2021-11-16T09:21:17.728Z"
   },
   {
    "duration": 1150,
    "start_time": "2021-11-16T09:21:29.568Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:24:14.495Z"
   },
   {
    "duration": 120,
    "start_time": "2021-11-16T09:24:46.630Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:28:27.882Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T09:29:54.281Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:30:45.936Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T09:31:06.300Z"
   },
   {
    "duration": 113,
    "start_time": "2021-11-16T09:31:37.208Z"
   },
   {
    "duration": 143,
    "start_time": "2021-11-16T09:31:48.656Z"
   },
   {
    "duration": 98,
    "start_time": "2021-11-16T09:31:55.678Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:32:08.535Z"
   },
   {
    "duration": 111,
    "start_time": "2021-11-16T09:32:10.120Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:32:15.732Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T09:32:29.423Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:03:03.074Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:10:01.288Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:10:46.923Z"
   },
   {
    "duration": 121,
    "start_time": "2021-11-16T10:37:46.494Z"
   },
   {
    "duration": 125,
    "start_time": "2021-11-16T10:38:20.632Z"
   },
   {
    "duration": 112,
    "start_time": "2021-11-16T10:46:53.001Z"
   },
   {
    "duration": 110,
    "start_time": "2021-11-16T10:48:25.775Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:50:18.720Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T10:50:37.649Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-16T10:50:51.884Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:51:56.237Z"
   },
   {
    "duration": 101,
    "start_time": "2021-11-16T10:53:13.791Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:55:59.186Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:10.751Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:49.038Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:49.174Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T10:56:49.414Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:49.680Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:50.370Z"
   },
   {
    "duration": 114,
    "start_time": "2021-11-16T10:59:34.518Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:01:41.201Z"
   },
   {
    "duration": 116,
    "start_time": "2021-11-16T11:01:48.754Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:02:16.685Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:02:19.479Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:02:47.067Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:02:49.353Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:03:07.835Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:03:07.953Z"
   },
   {
    "duration": 112,
    "start_time": "2021-11-16T11:07:52.072Z"
   },
   {
    "duration": 187,
    "start_time": "2021-11-16T11:09:23.468Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T11:10:01.455Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:10:05.069Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T11:10:13.376Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:10:14.434Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:10:22.853Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T11:27:29.279Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T11:29:08.919Z"
   },
   {
    "duration": 118,
    "start_time": "2021-11-16T11:29:46.703Z"
   },
   {
    "duration": 437,
    "start_time": "2021-11-16T11:36:02.181Z"
   },
   {
    "duration": 157,
    "start_time": "2021-11-16T11:36:14.388Z"
   },
   {
    "duration": 207,
    "start_time": "2021-11-16T11:47:15.898Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:53:52.092Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:53:52.236Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:59:12.005Z"
   },
   {
    "duration": 112,
    "start_time": "2021-11-16T12:00:33.446Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T12:02:14.453Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T12:02:39.512Z"
   },
   {
    "duration": 106,
    "start_time": "2021-11-16T12:03:03.460Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:37:21.139Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:37:22.229Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:38:38.806Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:38:41.958Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:43:46.551Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T20:58:21.835Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:59:21.872Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T20:59:45.352Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T20:59:49.646Z"
   },
   {
    "duration": 159,
    "start_time": "2021-11-17T21:02:26.949Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:03:53.461Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:03:53.694Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:05:28.145Z"
   },
   {
    "duration": 116,
    "start_time": "2021-11-17T21:05:57.787Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:06:37.993Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:06:38.261Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:11:54.358Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:12:43.846Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:13:08.773Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:14:44.441Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:15:42.059Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:15:51.995Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:15:53.923Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:15:55.282Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:16:28.492Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:16:32.603Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:17:06.941Z"
   },
   {
    "duration": 98,
    "start_time": "2021-11-17T21:18:05.733Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:21:35.255Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:21:37.804Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:23:06.071Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:23:24.799Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:23:32.591Z"
   },
   {
    "duration": 98,
    "start_time": "2021-11-17T21:28:31.559Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:28:45.448Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:29:17.303Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:29:29.617Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:29:32.681Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:36:11.474Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:36:14.791Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:36:53.943Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:36:56.165Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:37:16.590Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:37:22.702Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:38:03.479Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:38:08.601Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:38:12.928Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:38:48.896Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-17T21:38:49.171Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:39:57.889Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:39:58.057Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:41:20.108Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:41:20.629Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:42:49.136Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:43:15.137Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:43:16.766Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:43:31.711Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:43:36.312Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:45:08.825Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:45:10.119Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:45:13.748Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:45:22.219Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:45:33.412Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-17T21:46:01.885Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:46:03.628Z"
   },
   {
    "duration": 107,
    "start_time": "2021-11-17T21:47:32.512Z"
   },
   {
    "duration": 103,
    "start_time": "2021-11-17T21:50:36.243Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-18T06:28:31.440Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-18T06:29:00.168Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-18T06:31:27.008Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-18T06:35:34.288Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-18T06:38:04.527Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "286px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
